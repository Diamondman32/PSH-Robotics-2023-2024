package org.firstinspires.ftc.teamcode.drive;

import static org.firstinspires.ftc.robotcore.external.BlocksOpModeCompanion.telemetry;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import java.sql.Array;
import java.util.Arrays;
import java.util.List;

@TeleOp(group="drive")
public class TeleOpCenterStage extends OpMode {
    private DcMotor frontLeft, frontRight, backLeft, backRight, liftMotor1, liftMotor2;
    private CRServo leftServoArm, rightServoArm;
    private Servo leftGrabber, rightGrabber, droneLauncher;
    private double servoPos = 0.86; //for Grabber Arm
    private boolean rightGrabberToggle = true;
    private boolean leftGrabberToggle = true;
    private double pos = 0.0;


    public ElapsedTime rightGrabTimer = new ElapsedTime(ElapsedTime.Resolution.MILLISECONDS);
    public ElapsedTime leftGrabTimer = new ElapsedTime(ElapsedTime.Resolution.MILLISECONDS);


    public void liftToHeightEncoders(int level, double power){
        liftMotor1.setPower(0);
        liftMotor2.setPower(0);
        int liftValue = 0;
        if (level == 2) {
            liftValue = -1200;
        } else if (level == 3) {
            liftValue = -3800;
        } else if (level == 4) {
            liftValue = -4000;
        }

        liftMotor1.setTargetPosition(-liftValue);
        liftMotor2.setTargetPosition(liftValue);
        liftMotor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        liftMotor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        liftMotor1.setPower(power);
        liftMotor2.setPower(power);

        while (liftMotor1.isBusy()||liftMotor2.isBusy()){
            telemetry.addData("Left Lift Encoder Position", liftMotor1.getCurrentPosition());
            telemetry.addData("Right Lift Encoder Position", liftMotor2.getCurrentPosition());
            telemetry.update();
        }

        liftMotor1.setPower(0);
        liftMotor2.setPower(0);
        liftMotor1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        liftMotor2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void init() {
        frontLeft = hardwareMap.get(DcMotorEx.class, "tl"); //top-left
        frontRight = hardwareMap.get(DcMotorEx.class, "tr"); //top-right
        backLeft = hardwareMap.get(DcMotorEx.class, "bl"); //back-left
        backRight = hardwareMap.get(DcMotorEx.class, "br"); //back-right

        liftMotor1 = hardwareMap.get(DcMotorEx.class, "lm1"); //lift-motor-1 LEFT
        liftMotor2 = hardwareMap.get(DcMotorEx.class, "lm2"); //lift-motor-2 RIGHT
        liftMotor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        liftMotor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        liftMotor1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        liftMotor2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        leftServoArm = hardwareMap.get(CRServo.class, "lservoarm");
        rightServoArm = hardwareMap.get(CRServo.class, "rservoarm");

        leftGrabber = hardwareMap.get(Servo.class, "lgrab");
        rightGrabber = hardwareMap.get(Servo.class, "rgrab");

        droneLauncher = hardwareMap.get(Servo.class, "plane");
    }
    public void loop() {
            // Drive
        float yPosLeft01 = -gamepad1.left_stick_y;
        float yPosRight01 = -gamepad1.right_stick_y;
        float yPosLeft02 = -gamepad2.left_stick_y;
        float yPosRight02 = -gamepad2.right_stick_y;

        if(gamepad1.right_trigger > 0) {
            frontLeft.setPower(-gamepad1.right_trigger);
            frontRight.setPower(gamepad1.right_trigger);
            backLeft.setPower(gamepad1.right_trigger);
            backRight.setPower(-gamepad1.right_trigger);
        } else if(gamepad1.left_trigger > 0) {
            frontLeft.setPower(gamepad1.right_trigger);
            frontRight.setPower(-gamepad1.right_trigger);
            backLeft.setPower(-gamepad1.right_trigger);
            backRight.setPower(gamepad1.right_trigger);
        }else if(gamepad1.left_bumper) {
            frontLeft.setPower(-yPosLeft01*0.5);
            frontRight.setPower(yPosRight01*0.5);
            backLeft.setPower(-yPosLeft01*0.5);
            backRight.setPower(yPosRight01*0.5);
        } else if(gamepad1.right_bumper) {
            frontLeft.setPower(-yPosLeft01*0.5);
            frontRight.setPower(yPosRight01*0.5);
            backLeft.setPower(-yPosLeft01*0.5);
            backRight.setPower(yPosRight01*0.5);
        } else {
            frontLeft.setPower(-yPosLeft01);
            frontRight.setPower(yPosRight01);
            backLeft.setPower(-yPosLeft01);
            backRight.setPower(yPosRight01);
        }


            // Lift
        //If there is a difference in motor positions, set the power multiplier of the faster motor to
        // the divided motor positions ALSO LIFT MOTOR 2 SPINS OPPOSITE WAY SO IT NEEDS TO BE NEGATIVE
        double liftMultiplier1 = 1;
        double liftMultiplier2 = 1;
        if(Math.abs(Math.abs(liftMotor1.getCurrentPosition())-Math.abs(liftMotor2.getCurrentPosition())) > 15 &&
                liftMotor1.getCurrentPosition() != 0 && liftMotor2.getCurrentPosition() != 0) {
            if (Math.abs(liftMotor1.getCurrentPosition())>Math.abs(liftMotor2.getCurrentPosition())) {
                if (gamepad2.right_trigger > 0.03) { //if going up handicap higher motor
                    //liftMultiplier2 = (double) Math.abs(liftMotor2.getCurrentPosition()/ (double) liftMotor1.getCurrentPosition());
                    liftMultiplier1 = 0.95;
                } else if (gamepad2.left_trigger > 0.03) { //if going down handicap lower motor
                    //liftMultiplier1 = (double) Math.abs(liftMotor2.getCurrentPosition()/ (double) liftMotor1.getCurrentPosition());
                    liftMultiplier2 = 0.95;
                }
            } else {
                if (gamepad2.right_trigger > 0.03) {
                    //liftMultiplier2 = (double) Math.abs(liftMotor1.getCurrentPosition()/ (double) liftMotor2.getCurrentPosition());
                    liftMultiplier1 = 0.95;
                } else if (gamepad2.left_trigger > 0.03) {
                    //liftMultiplier1 = (double) Math.abs(liftMotor1.getCurrentPosition()/ (double) liftMotor2.getCurrentPosition());
                    liftMultiplier2 = 0.95;
                }
            }
        } else {
            liftMultiplier1 = 1.00;
            liftMultiplier2 = 1.00; //MAKE LIMIT ~1600
        }

        if (gamepad2.right_trigger > 0.03) {
            liftMotor1.setPower(gamepad2.right_trigger * liftMultiplier1);
            liftMotor2.setPower(-1 * gamepad2.right_trigger * liftMultiplier2);
        } else if (gamepad2.left_trigger > 0.03) {
            liftMotor1.setPower(-1 * gamepad2.left_trigger * liftMultiplier1);
            liftMotor2.setPower(gamepad2.left_trigger * liftMultiplier2);
        } else {
            liftMotor1.setPower(0);
            liftMotor2.setPower(0);
        }

        //if (gamepad1.y) {
        //    liftToHeightEncoders(1, 0.25);
        //}
        //if (gamepad1.b) {
        //    liftToHeightEncoders(2, 0.25);
        //}


            //Grabber Arm
        //leftServoArm.setPower(yPosLeft02);
        rightServoArm.setPower(-yPosRight02);

            //Grabber
        if (yPosLeft02 > 0.5) { //TESTER FOR SERVO VALUES
            pos += 0.01;
        }
        if (yPosLeft02 < -0.5) {
            pos -= 0.01;
        }
        if (rightGrabberToggle && gamepad2.right_bumper && rightGrabTimer.milliseconds()>250){
            //open
            servoPos = 0.71;
            rightGrabberToggle = false;
            rightGrabTimer.reset();
        } else if (!rightGrabberToggle && gamepad2.right_bumper && rightGrabTimer.milliseconds()>250) {
            //closed
            servoPos = 0.86;
            rightGrabberToggle = true;
            rightGrabTimer.reset();
        }
        rightGrabber.setPosition(servoPos);

        //if (leftGrabberToggle && gamepad2.left_bumper && leftGrabTimer.milliseconds()>750){
            //open
        //    leftGrabber.setPosition(0.63);
        //    leftGrabberToggle = false;
        //    leftGrabTimer.reset();
        //} else if (!leftGrabberToggle && gamepad2.left_bumper && leftGrabTimer.milliseconds()>750) {
            //closed
        //    leftGrabber.setPosition(0.4);
        //    leftGrabberToggle = true;
         //   leftGrabTimer.reset(); //0.59 open 0.63
        //}

            //Drone Launcher
        if (gamepad1.b) {
            //droneLauncher.setPosition(0.56);
        }
        //droneLauncher.setPosition(pos);

        telemetry.addData("LiftPos1", -liftMotor1.getCurrentPosition());
        telemetry.addData("LiftPos2", liftMotor2.getCurrentPosition());
        telemetry.addData("Mult1", liftMultiplier1);
        telemetry.addData("Mult2", liftMultiplier2);
        telemetry.addData("servoPos", servoPos);
        telemetry.addData("rightGrabber", Arrays.asList(new Double[] { rightGrabber.getPosition(), rightGrabTimer.seconds(), pos }));
        telemetry.addData("dronePos", droneLauncher.getPosition());
        telemetry.update();
    }
}
